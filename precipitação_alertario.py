# -*- coding: utf-8 -*-
"""precipita√ß√£o_alertario.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pV8W5btVzr64X3fGLFGuoSzQ6BQaDYdl
"""

from google.colab import drive
drive.mount('/content/drive')
import os

# Defina o caminho da pasta no seu Drive
pasta = '/content/drive/MyDrive/Dados_alertario'

# Verificar se a pasta existe
if os.path.exists(pasta):
    print(f"Arquivos na pasta '{pasta}':\n")
    arquivos = os.listdir(pasta)
    for arquivo in arquivos:
        print(arquivo)
else:
    print(f"A pasta '{pasta}' n√£o foi encontrada. Verifique se o nome est√° correto.")

import pandas as pd
import os
import matplotlib.pyplot as plt

# Caminho da pasta
pasta = '/content/drive/MyDrive/Dados_alertario'
dados_estacoes = {}

for arquivo in os.listdir(pasta):
    caminho_arquivo = os.path.join(pasta, arquivo)

    try:
        # Ler o arquivo
        if arquivo.endswith('.csv'):
            df = pd.read_csv(caminho_arquivo)
        elif arquivo.endswith('.xlsx'):
            df = pd.read_excel(caminho_arquivo)
        else:
            continue

        # Verifica se colunas m√≠nimas existem
        if not {'Dia', 'Hora', '24 h'}.issubset(df.columns):
            print(f"‚ö†Ô∏è Estrutura n√£o esperada em: {arquivo}")
            continue

        # Combinar Dia + Hora em uma coluna de datetime
        df['data'] = pd.to_datetime(df['Dia'] + ' ' + df['Hora'], errors='coerce')
        df = df.dropna(subset=['data'])

        # Converter coluna de precipita√ß√£o para n√∫mero
        df['precipitacao'] = pd.to_numeric(df['24 h'], errors='coerce')
        df = df.dropna(subset=['precipitacao'])

        # Agrupar por ano
        df['ano'] = df['data'].dt.year
        precip_ano = df.groupby('ano')['precipitacao'].sum()

        nome_estacao = os.path.splitext(arquivo)[0]
        dados_estacoes[nome_estacao] = precip_ano

        print(f"‚úÖ Processado: {arquivo}")

    except Exception as e:
        print(f"‚ùå Erro ao processar {arquivo}: {e}")

# Unir os dados de todas as esta√ß√µes
df_todos = pd.DataFrame(dados_estacoes)

if df_todos.empty:
    print("‚ùå Nenhum dado v√°lido foi encontrado para gerar o gr√°fico.")
else:
    # Calcular a m√©dia do acumulado anual
    media_anual = df_todos.mean()

    # Plotar o gr√°fico
    plt.figure(figsize=(14, 6))
    media_anual.sort_values(ascending=False).plot(kind='bar', color='royalblue')
    plt.ylabel('M√©dia do Acumulado Anual de Precipita√ß√£o (mm)')
    plt.title('M√©dia do Acumulado Anual de Precipita√ß√£o por Esta√ß√£o')
    plt.xticks(rotation=90)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

import pandas as pd
import os
import matplotlib.pyplot as plt

# Caminho da pasta
pasta = '/content/drive/MyDrive/Dados_alertario'
dados_mensais = {}

for arquivo in os.listdir(pasta):
    caminho_arquivo = os.path.join(pasta, arquivo)

    try:
        # Ler o arquivo
        if arquivo.endswith('.csv'):
            df = pd.read_csv(caminho_arquivo)
        elif arquivo.endswith('.xlsx'):
            df = pd.read_excel(caminho_arquivo)
        else:
            continue

        # Verifica se colunas esperadas existem
        if not {'Dia', 'Hora', '24 h'}.issubset(df.columns):
            print(f"‚ö†Ô∏è Estrutura n√£o esperada em: {arquivo}")
            continue

        # Combina Dia + Hora em uma √∫nica coluna datetime
        df['data'] = pd.to_datetime(df['Dia'] + ' ' + df['Hora'], errors='coerce')
        df = df.dropna(subset=['data'])

        # Converte precipita√ß√£o para num√©rico
        df['precipitacao'] = pd.to_numeric(df['24 h'], errors='coerce')
        df = df.dropna(subset=['precipitacao'])

        # Extrai ano e m√™s
        df['ano'] = df['data'].dt.year
        df['mes'] = df['data'].dt.month

        # Agrupa por ano e m√™s e soma a precipita√ß√£o
        precip_mensal = df.groupby(['ano', 'mes'])['precipitacao'].sum().reset_index()

        # Agora calcula a m√©dia para cada m√™s (independente do ano)
        media_mensal = precip_mensal.groupby('mes')['precipitacao'].mean()

        nome_estacao = os.path.splitext(arquivo)[0]
        dados_mensais[nome_estacao] = media_mensal

        print(f"‚úÖ Processado: {arquivo}")

    except Exception as e:
        print(f"‚ùå Erro ao processar {arquivo}: {e}")

# Junta os dados de todas as esta√ß√µes em um DataFrame
df_mensal = pd.DataFrame(dados_mensais)

if df_mensal.empty:
    print("‚ùå Nenhum dado v√°lido foi encontrado para gerar o gr√°fico.")
else:
    # Plotar gr√°fico
    plt.figure(figsize=(14, 6))
    df_mensal.T.mean().plot(kind='bar', color='royalblue')
    plt.xticks(ticks=range(12), labels=['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'], rotation=45)
    plt.ylabel('M√©dia de Precipita√ß√£o Mensal (mm)')
    plt.title('M√©dia da Precipita√ß√£o Mensal por Esta√ß√£o (m√©dia entre esta√ß√µes)')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

import pandas as pd
import os
import matplotlib.pyplot as plt

# Caminho da pasta
pasta = '/content/drive/MyDrive/Dados_alertario'
dados_mensais = {}

for arquivo in os.listdir(pasta):
    caminho_arquivo = os.path.join(pasta, arquivo)

    try:
        if arquivo.endswith('.csv'):
            df = pd.read_csv(caminho_arquivo)
        elif arquivo.endswith('.xlsx'):
            df = pd.read_excel(caminho_arquivo)
        else:
            continue

        if not {'Dia', 'Hora', '24 h'}.issubset(df.columns):
            print(f"‚ö†Ô∏è Estrutura n√£o esperada em: {arquivo}")
            continue

        df['data'] = pd.to_datetime(df['Dia'] + ' ' + df['Hora'], errors='coerce')
        df = df.dropna(subset=['data'])

        df['precipitacao'] = pd.to_numeric(df['24 h'], errors='coerce')
        df = df.dropna(subset=['precipitacao'])

        df['ano'] = df['data'].dt.year
        df['mes'] = df['data'].dt.month

        precip_mensal = df.groupby(['ano', 'mes'])['precipitacao'].sum().reset_index()
        media_mensal = precip_mensal.groupby('mes')['precipitacao'].mean()

        nome_estacao = os.path.splitext(arquivo)[0]

        # Ignorar a esta√ß√£o Alto da Boa Vista
        if nome_estacao.lower() == 'alto_da_boa_vista':
            print(f"üö´ Ignorando esta√ß√£o: {nome_estacao}")
            continue

        dados_mensais[nome_estacao] = media_mensal

        print(f"‚úÖ Processado: {arquivo}")

    except Exception as e:
        print(f"‚ùå Erro ao processar {arquivo}: {e}")

# Junta os dados de todas as esta√ß√µes em um DataFrame
df_mensal = pd.DataFrame(dados_mensais)

if df_mensal.empty:
    print("‚ùå Nenhum dado v√°lido foi encontrado para gerar o gr√°fico.")
else:
    # Plotar gr√°fico da m√©dia entre as esta√ß√µes (exceto Alto da Boa Vista)
    plt.figure(figsize=(14, 6))
    df_mensal.T.mean().plot(kind='bar', color='royalblue')
    plt.xticks(
        ticks=range(12),
        labels=['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
        rotation=45
    )
    plt.ylabel('M√©dia de Precipita√ß√£o Mensal (mm)')
    plt.title('M√©dia da Precipita√ß√£o Mensal por Esta√ß√£o (exceto Alto da Boa Vista)')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()

import pandas as pd
import os
import matplotlib.pyplot as plt

# Caminho da pasta
pasta = '/content/drive/MyDrive/Dados_alertario'
dados_diarios = {}

for arquivo in os.listdir(pasta):
    caminho_arquivo = os.path.join(pasta, arquivo)

    try:
        if arquivo.endswith('.csv'):
            df = pd.read_csv(caminho_arquivo)
        elif arquivo.endswith('.xlsx'):
            df = pd.read_excel(caminho_arquivo)
        else:
            continue

        if not {'Dia', 'Hora', '24 h'}.issubset(df.columns):
            print(f"‚ö†Ô∏è Estrutura n√£o esperada em: {arquivo}")
            continue

        # Combinar Dia + Hora
        df['data'] = pd.to_datetime(df['Dia'] + ' ' + df['Hora'], errors='coerce')
        df = df.dropna(subset=['data'])

        # Converter precipita√ß√£o
        df['precipitacao'] = pd.to_numeric(df['24 h'], errors='coerce')
        df = df.dropna(subset=['precipitacao'])

        # Agrupar por data (ignorando hora), somar precipita√ß√£o di√°ria
        df['data_dia'] = df['data'].dt.date
        diario = df.groupby('data_dia')['precipitacao'].sum().reset_index()

        # Criar coluna com dia do ano (1‚Äì366)
        diario['dia_ano'] = pd.to_datetime(diario['data_dia']).dt.dayofyear

        # Calcular m√©dia da precipita√ß√£o por dia do ano (sobre os anos)
        media_diaria = diario.groupby('dia_ano')['precipitacao'].mean()

        nome_estacao = os.path.splitext(arquivo)[0]
        dados_diarios[nome_estacao] = media_diaria

        print(f"‚úÖ Processado: {arquivo}")

    except Exception as e:
        print(f"‚ùå Erro ao processar {arquivo}: {e}")

# Unir os dados em DataFrame
df_diario = pd.DataFrame(dados_diarios)

if df_diario.empty:
    print("‚ùå Nenhum dado v√°lido foi encontrado para gerar o gr√°fico.")
else:
    # Plotar linhas com a m√©dia di√°ria por esta√ß√£o
    plt.figure(figsize=(16, 6))
    for estacao in df_diario.columns:
        plt.plot(df_diario.index, df_diario[estacao], label=estacao)

    plt.xlabel('Dia do Ano')
    plt.ylabel('M√©dia Di√°ria de Precipita√ß√£o (mm)')
    plt.title('M√©dia Di√°ria da Precipita√ß√£o por Esta√ß√£o (incluindo Alto da Boa Vista)')
    plt.legend(loc='upper right', fontsize='small', ncol=2)
    plt.grid(linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()